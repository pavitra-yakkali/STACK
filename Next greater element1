//BRUTE
import java.util.Arrays;

class Solution {
    // Brute Force Approach
    public int[] nextGreaterElementBruteForce(int[] nums) {
        int n = nums.length;
        int[] result = new int[n];

        // Iterate over each element in nums
        for (int i = 0; i < n; i++) {
            result[i] = -1;  // Assume no greater element exists

            // Look at all elements to the right of nums[i]
            for (int j = i + 1; j < n; j++) {
                if (nums[j] > nums[i]) {
                    result[i] = nums[j]; // Found the next greater element
                    break; // No need to check further as we found the next greater
                }
            }
        }

        return result;
    }
}

public class Main {
    public static void main(String[] args) {
        Solution solution = new Solution();

        // Example input array
        int[] nums = {4, 5, 2, 10, 8};

        // Calling the brute force method
        int[] bruteForceResult = solution.nextGreaterElementBruteForce(nums);
        System.out.println("Brute Force Result: " + Arrays.toString(bruteForceResult));
    }
}
//optimal
import java.util.*;

class Solution {
    // Optimal Approach (Using Stack)
    public int[] nextGreaterElementOptimal(int[] nums) {
        int n = nums.length;
        int[] result = new int[n];
        Stack<Integer> stack = new Stack<>();
        Map<Integer, Integer> map = new HashMap<>();

        // Traverse the array from right to left
        for (int i = n - 1; i >= 0; i--) {
            // Pop elements from the stack that are smaller or equal to nums[i]
            while (!stack.isEmpty() && stack.peek() <= nums[i]) {
                stack.pop();
            }

            // If the stack is empty, there is no next greater element for nums[i]
            if (stack.isEmpty()) {
                map.put(nums[i], -1);
            } else {
                map.put(nums[i], stack.peek());
            }

            // Push the current element onto the stack
            stack.push(nums[i]);
        }

        // Fill the result array using the map
        for (int i = 0; i < n; i++) {
            result[i] = map.get(nums[i]);
        }

        return result;
    }
}

public class Main {
    public static void main(String[] args) {
        Solution solution = new Solution();

        // Example input array
        int[] nums = {4, 5, 2, 10, 8};

        // Calling the optimal method
        int[] optimalResult = solution.nextGreaterElementOptimal(nums);
        System.out.println("Optimal Result: " + Arrays.toString(optimalResult));
    }
}

