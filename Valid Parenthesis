import java.util.*;

class Solution {
    public boolean isValid(String s) {
        int n = s.length();
        Stack<Character> st = new Stack<>();
        for (int i = 0; i < n; i++) {
            char c = s.charAt(i);

            if (c == '(' || c == '{' || c == '[') {
                st.push(c);
            } else if (c == ')') {
                if (st.isEmpty() || st.peek() != '(') return false;
                st.pop();
            } else if (c == '}') {
                if (st.isEmpty() || st.peek() != '{') return false;
                st.pop();
            } else if (c == ']') {
                if (st.isEmpty() || st.peek() != '[') return false;
                st.pop();
            }
        }

        if (st.size() == 0) {
            return true;
        } else {
            return false;
        }
    }

    // Main method with test cases
    public static void main(String[] args) {
        Solution sol = new Solution();

        // Test cases
        String[] tests = {"()", "()[]{}", "(]", "([)]", "{[]}", ""};
        for (String test : tests) {
            System.out.println("Input: " + test + " -> Output: " + sol.isValid(test));
        }

        // Complexity Analysis
        System.out.println("\nTime Complexity: O(n) (we scan each character once)");
        System.out.println("Space Complexity: O(n) (in worst case, all characters go into stack)");
    }
}
